/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

/**
 *
 * @author Micha≈Ç
 */
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.*;

public class CalculatorGUI extends javax.swing.JFrame {

    public CalculatorGUI() {
        initComponents();
    }

    //instancja klasy Values
    Values elo = new Values();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textField = new javax.swing.JTextField();
        one = new javax.swing.JButton();
        two = new javax.swing.JButton();
        three = new javax.swing.JButton();
        four = new javax.swing.JButton();
        five = new javax.swing.JButton();
        six = new javax.swing.JButton();
        seven = new javax.swing.JButton();
        eight = new javax.swing.JButton();
        nine = new javax.swing.JButton();
        zero = new javax.swing.JButton();
        comma = new javax.swing.JButton();
        multiply = new javax.swing.JButton();
        plus = new javax.swing.JButton();
        equals = new javax.swing.JButton();
        divide = new javax.swing.JButton();
        minus = new javax.swing.JButton();
        del = new javax.swing.JButton();
        lBracket = new javax.swing.JButton();
        rBracket = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Kalkulator");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        textField.setFocusable(false);

        one.setText("1");
        one.setFocusable(false);
        one.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                oneActionPerformed(evt);
            }
        });

        two.setText("2");
        two.setFocusable(false);
        two.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoActionPerformed(evt);
            }
        });

        three.setText("3");
        three.setFocusable(false);
        three.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                threeActionPerformed(evt);
            }
        });

        four.setText("4");
        four.setFocusable(false);
        four.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fourActionPerformed(evt);
            }
        });

        five.setText("5");
        five.setFocusable(false);
        five.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fiveActionPerformed(evt);
            }
        });

        six.setText("6");
        six.setFocusable(false);
        six.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sixActionPerformed(evt);
            }
        });

        seven.setText("7");
        seven.setFocusable(false);
        seven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sevenActionPerformed(evt);
            }
        });

        eight.setText("8");
        eight.setFocusable(false);
        eight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eightActionPerformed(evt);
            }
        });

        nine.setText("9");
        nine.setFocusable(false);
        nine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nineActionPerformed(evt);
            }
        });

        zero.setText("0");
        zero.setFocusable(false);
        zero.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zeroActionPerformed(evt);
            }
        });

        comma.setText(".");
        comma.setFocusable(false);
        comma.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                commaActionPerformed(evt);
            }
        });

        multiply.setText("*");
        multiply.setFocusable(false);
        multiply.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multiplyActionPerformed(evt);
            }
        });

        plus.setText("+");
        plus.setFocusable(false);
        plus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                plusActionPerformed(evt);
            }
        });

        equals.setText("=");
        equals.setFocusable(false);
        equals.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                equalsActionPerformed(evt);
            }
        });

        divide.setText("/");
        divide.setFocusable(false);
        divide.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                divideActionPerformed(evt);
            }
        });

        minus.setText("-");
        minus.setFocusable(false);
        minus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                minusActionPerformed(evt);
            }
        });

        del.setText("<---");
        del.setFocusable(false);
        del.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                delActionPerformed(evt);
            }
        });

        lBracket.setText("(");
        lBracket.setFocusable(false);
        lBracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lBracketActionPerformed(evt);
            }
        });

        rBracket.setText(")");
        rBracket.setFocusable(false);
        rBracket.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rBracketActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textField)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(four, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(seven, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(zero, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(one, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(two, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(five, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(eight, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(comma, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(nine, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(six, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(three, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(multiply, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(plus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(del, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(divide, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                            .addComponent(minus, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rBracket, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(equals, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE))
                        .addGap(1, 1, 1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(textField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(one)
                    .addComponent(two)
                    .addComponent(three)
                    .addComponent(multiply)
                    .addComponent(divide))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(four)
                    .addComponent(five)
                    .addComponent(six)
                    .addComponent(plus)
                    .addComponent(minus))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(seven)
                    .addComponent(eight)
                    .addComponent(nine)
                    .addComponent(lBracket)
                    .addComponent(rBracket))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(zero)
                    .addComponent(comma)
                    .addComponent(del)
                    .addComponent(equals))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void equalsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_equalsActionPerformed
        ArrayList<String> tokensList = new ArrayList<>();

        do {

            ArrayList<String> partialTokensList = new ArrayList<>();
            int amountOfTokens;
            //sprawdzamy, czy mamy nawias
            boolean bracket = elo.ifBracket();
            if (bracket == true) {
                elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());
                elo.harvestNumbersFromLastBracket(partialTokensList, tokensList, elo);
                System.out.println(elo.getSubstringFromBrackets());
                if (partialTokensList.size() > 1) {
                //sprawdzaj czy mno≈ºenie/dzielenie/dodawanie/odejmowanie i licz, 
                    //czyli wszystko to co jest na dole + usu≈Ñ nawiasy

                    //sprawdzamy, czy w dzia≈Çaniu jest mno≈ºenie lub dzielenie
                    boolean multiplyOrDivide = elo.ifMultiplyOrDivide(elo.getSubstringFromBrackets());
                    System.out.println("boolean z nawias√≥w multiplyOrDivide: " + multiplyOrDivide);
                    System.out.println(elo.getSubstringFromBrackets());

                    while (multiplyOrDivide == true) {

                        int indexOfSymbolDivide = 0;
                        int indexOfSymbolMultiply = 0;
                        boolean multiply = elo.ifMultiply(elo.getSubstringFromBrackets());

                        boolean divide = elo.ifDivide(elo.getSubstringFromBrackets());

                        //je≈õli jest i mno≈ºenie, i dzielenie
                        if (multiply == true && divide == true) {
                            elo.harvestNumberWithoutBracket(partialTokensList, elo.getSubstringFromBrackets());
                            indexOfSymbolMultiply = partialTokensList.indexOf("*");
                            indexOfSymbolDivide = partialTokensList.indexOf("/");
                            int indexOfFirstSymbol = elo.compareIndexOfSymbol(indexOfSymbolDivide, indexOfSymbolMultiply);
                            String symbol = partialTokensList.get(indexOfFirstSymbol);
                            elo.count(symbol, partialTokensList);
                            elo.fromArrayListToSubstringFromBrackets(partialTokensList, elo);
                            //je≈õli jest tylko mno≈ºenie
                        } else if (multiply == true && divide == false) {
                            elo.harvestNumberWithoutBracket(partialTokensList, elo.getSubstringFromBrackets());
                            int indexOfMultiply = partialTokensList.indexOf("*");
                            String symbol = partialTokensList.get(indexOfMultiply);
                            elo.count(symbol, partialTokensList);
                            elo.fromArrayListToSubstringFromBrackets(partialTokensList, elo);
                            //je≈õli jest tylko dzielenie
                        } else if (multiply == false && divide == true) {
                            elo.harvestNumberWithoutBracket(partialTokensList, elo.getSubstringFromBrackets());
                            int indexOfDivide = partialTokensList.indexOf("/");
                            String symbol = partialTokensList.get(indexOfDivide);
                            elo.count(symbol, partialTokensList);
                            elo.fromArrayListToSubstringFromBrackets(partialTokensList, elo);
                        }
                        //znowu sprawdzamy, czy jest mno≈ºenie lub dzielenie, ≈ºeby nie wykonywaƒá pƒôtli w k√≥≈Çko
                        multiplyOrDivide = elo.ifMultiplyOrDivide(elo.getSubstringFromBrackets());

                        //sprawdzamy ile jest liczb. Je≈õli jedna, to kalkulator ko≈Ñczy obliczenia i wyswietla tƒô liczbƒô
                        if (partialTokensList.size() == 1) {
                            break;
                        }
                    }
                    //ni≈ºej zajmujemy siƒô dodawaniem i odejmowaniem
                    elo.harvestNumberWithoutBracket(partialTokensList, elo.getSubstringFromBrackets());
                    System.out.println(elo.getSubstringFromBrackets());
                    System.out.println("amountOfTokensFromPartial: " + partialTokensList.size());
                    while (partialTokensList.size() >= 2) {
                        System.out.println("drukujƒô tablicƒô partialTokensList");
                        String[] e2Array = partialTokensList.toArray(new String[partialTokensList.size()]);
                        System.out.println(Arrays.deepToString(e2Array));
                        elo.harvestNumberWithoutBracket(partialTokensList, elo.getSubstringFromBrackets());
                        System.out.println("jestem po harvestNumberWithoutBracket z dodawania z nawias√≥w");
                        System.out.println("drukujƒô tablicƒô partialTokensList");

                        System.out.println(Arrays.deepToString(e2Array));
                        elo.deletePlus(partialTokensList, elo.getSubstringFromBrackets());
                        System.out.println("amountOfTokensFromPartial: " + partialTokensList.size());
                        System.out.println("jestem po deletePlus z dodawania z nawias√≥w");
                        String wynik = elo.countPlus(partialTokensList);
                        System.out.println("jestem po countPlus z dodawania z nawias√≥w");
                        System.out.println("warto≈õƒá Value2: " + elo.getValue2());
                        elo.twoIntoOne(wynik, elo);
                        elo.fromArrayListToSubstringFromBrackets(partialTokensList, elo);
                        System.out.println("amountOfTokens: " + tokensList.size());
                    }
                } else {
                    //usu≈Ñ nawiasy i wklej do ArrayLista bez nawiasu
                }
            } else {
                //sprawdzamy, czy w dzia≈Çaniu jest mno≈ºenie lub dzielenie
                boolean multiplyOrDivide = elo.ifMultiplyOrDivide(elo.getValue2());
                System.out.println("boolean z nawias√≥w multiplyOrDivide: " + multiplyOrDivide);
                while (multiplyOrDivide == true) {

                    int indexOfSymbolDivide = 0;
                    int indexOfSymbolMultiply = 0;
                    boolean multiply = elo.ifMultiply(elo.getValue2());

                    boolean divide = elo.ifDivide(elo.getValue2());

                    //je≈õli jest i mno≈ºenie, i dzielenie
                    if (multiply == true && divide == true) {
                        elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());
                        indexOfSymbolMultiply = tokensList.indexOf("*");
                        indexOfSymbolDivide = tokensList.indexOf("/");
                        int indexOfFirstSymbol = elo.compareIndexOfSymbol(indexOfSymbolDivide, indexOfSymbolMultiply);
                        String symbol = tokensList.get(indexOfFirstSymbol);
                        elo.count(symbol, tokensList);
                        elo.fromArrayListToValue2(tokensList, elo);
                        //je≈õli jest tylko mno≈ºenie
                    } else if (multiply == true && divide == false) {
                        elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());
                        int indexOfMultiply = tokensList.indexOf("*");
                        String symbol = tokensList.get(indexOfMultiply);
                        elo.count(symbol, tokensList);
                        elo.fromArrayListToValue2(tokensList, elo);
                        //je≈õli jest tylko dzielenie
                    } else if (multiply == false && divide == true) {
                        elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());
                        int indexOfDivide = tokensList.indexOf("/");
                        String symbol = tokensList.get(indexOfDivide);
                        elo.count(symbol, tokensList);
                        elo.fromArrayListToValue2(tokensList, elo);
                    }
                    //znowu sprawdzamy, czy jest mno≈ºenie lub dzielenie, ≈ºeby nie wykonywaƒá pƒôtli w k√≥≈Çko
                    multiplyOrDivide = elo.ifMultiplyOrDivide(elo.getValue2());
                //sprawdzamy ile jest liczb. Je≈õli jedna, to kalkulator ko≈Ñczy obliczenia i wyswietla tƒô liczbƒô
                    //int amountOfTokens = tokensList.size();
                    if (tokensList.size() == 1) {
                        break;
                    }
                }
                //ni≈ºej zajmujemy siƒô dodawaniem i odejmowaniem
                elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());

                System.out.println("amountoftokens: " + tokensList.size());
                System.out.println("Value2: " + elo.getValue2());
                while (tokensList.size() >= 2) {

                    elo.harvestNumberWithoutBracket(tokensList, elo.getValue2());
                    boolean doubleMinuses = elo.checkDoubleMinuses(tokensList, elo.getValue2());
                    boolean singleMinus = elo.checkSingleMinus(tokensList, elo.getValue2());
                    System.out.println("boolean doubleMinuses: " + doubleMinuses);
                    System.out.println("boolean singleMinus: " + singleMinus);
                    if (doubleMinuses == true) {
                        elo.countMinus(elo, tokensList, elo.getValue2());
                    } else if(singleMinus == true) {
                        elo.countSingleMinus(elo, tokensList, elo.getValue2());
                    } else {
                        elo.deletePlus(tokensList, elo.getValue2());
                    elo.countPlus(tokensList);
                    }
                    
                    elo.fromArrayListToValue2(tokensList, elo);
                    amountOfTokens = tokensList.size();
                }
            }

        } while (tokensList.size() > 1);
    }//GEN-LAST:event_equalsActionPerformed

    private void oneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_oneActionPerformed
        elo.print(one, textField, elo);
    }//GEN-LAST:event_oneActionPerformed

    private void twoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoActionPerformed
        elo.print(two, textField, elo);
    }//GEN-LAST:event_twoActionPerformed

    private void threeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_threeActionPerformed
        elo.print(three, textField, elo);
    }//GEN-LAST:event_threeActionPerformed

    private void fourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fourActionPerformed
        elo.print(four, textField, elo);
    }//GEN-LAST:event_fourActionPerformed

    private void fiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fiveActionPerformed
        elo.print(five, textField, elo);
    }//GEN-LAST:event_fiveActionPerformed

    private void sixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sixActionPerformed
        elo.print(six, textField, elo);
    }//GEN-LAST:event_sixActionPerformed

    private void sevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sevenActionPerformed
        elo.print(seven, textField, elo);
    }//GEN-LAST:event_sevenActionPerformed

    private void eightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eightActionPerformed
        elo.print(eight, textField, elo);
    }//GEN-LAST:event_eightActionPerformed

    private void nineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nineActionPerformed
        elo.print(nine, textField, elo);
    }//GEN-LAST:event_nineActionPerformed

    private void zeroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zeroActionPerformed
        elo.print(zero, textField, elo);
    }//GEN-LAST:event_zeroActionPerformed

    private void commaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_commaActionPerformed
        String valueSpace = elo.getValue2() + comma.getText();
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + comma.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_commaActionPerformed

    private void multiplyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multiplyActionPerformed
        String valueSpace = elo.getValue2() + " " + multiply.getText() + " ";
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + multiply.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_multiplyActionPerformed

    private void divideActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_divideActionPerformed
        String valueSpace = elo.getValue2() + " " + divide.getText() + " ";
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + divide.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_divideActionPerformed

    private void plusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_plusActionPerformed
        String valueSpace = elo.getValue2() + " " + plus.getText() + " ";
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + plus.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_plusActionPerformed

    private void minusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_minusActionPerformed
        String valueSpace = elo.getValue2() + " " + minus.getText();
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + minus.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_minusActionPerformed

    private void delActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_delActionPerformed
        elo.delete(textField, elo);
        elo.deleteSpace(elo);
    }//GEN-LAST:event_delActionPerformed

    private void lBracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lBracketActionPerformed
        String valueSpace = elo.getValue2() + " " + lBracket.getText() + " ";
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + lBracket.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_lBracketActionPerformed

    private void rBracketActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rBracketActionPerformed
        String valueSpace = elo.getValue2() + " " + rBracket.getText() + " ";
        elo.setValue2(valueSpace);
        String value2 = elo.getValue() + rBracket.getText();
        elo.setValue(value2);
        elo.symbolControl(elo);
        textField.setText(elo.getValue());
        System.out.println(elo.getValue2());
    }//GEN-LAST:event_rBracketActionPerformed

    //metoda odpowiedzialna za obs≈Çugƒô klawiatury
    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        int key = (evt.getKeyCode());
        switch (key) {
            case KeyEvent.VK_1:
                elo.print(one, textField, elo);
                break;
            case KeyEvent.VK_2:
                elo.print(two, textField, elo);
                break;
            case KeyEvent.VK_3:
                elo.print(three, textField, elo);
                break;
            case KeyEvent.VK_4:
                elo.print(four, textField, elo);
                break;
            case KeyEvent.VK_5:
                elo.print(five, textField, elo);
                break;
            case KeyEvent.VK_6:
                elo.print(six, textField, elo);
                break;
            case KeyEvent.VK_7:
                elo.print(seven, textField, elo);
                break;
            case KeyEvent.VK_8:
                elo.print(eight, textField, elo);
                break;
            case KeyEvent.VK_9:
                elo.print(nine, textField, elo);
                break;
            case KeyEvent.VK_0:
                elo.print(zero, textField, elo);
                break;
            case KeyEvent.VK_BACK_SPACE:
                elo.delete(textField, elo);
                elo.deleteSpace(elo);
                ;
                break;
        }
    }//GEN-LAST:event_formKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalculatorGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                CalculatorGUI gui = new CalculatorGUI();
                gui.setVisible(true);
                gui.pack();
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton comma;
    private javax.swing.JButton del;
    private javax.swing.JButton divide;
    private javax.swing.JButton eight;
    private javax.swing.JButton equals;
    private javax.swing.JButton five;
    private javax.swing.JButton four;
    private javax.swing.JButton lBracket;
    private javax.swing.JButton minus;
    private javax.swing.JButton multiply;
    private javax.swing.JButton nine;
    public javax.swing.JButton one;
    private javax.swing.JButton plus;
    private javax.swing.JButton rBracket;
    private javax.swing.JButton seven;
    private javax.swing.JButton six;
    private javax.swing.JTextField textField;
    private javax.swing.JButton three;
    private javax.swing.JButton two;
    private javax.swing.JButton zero;
    // End of variables declaration//GEN-END:variables
}
